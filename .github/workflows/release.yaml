name: release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: "1.17"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      RAW_VERSION: ${{ steps.get_version.outputs.RAW_VERSION }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get the target release version
      id: get_version
      # ver has leading "v"
      # raw_ver strips the leading "v"
      # RPM versions need sem-ver prerelease "-" switched to "~" to be valid version strings
      run: |
        ver=${GITHUB_REF/refs\/tags\//}
        raw_ver=${ver#v}
        echo ::set-output name=VERSION::${ver}
        echo ::set-output name=RAW_VERSION::${raw_ver}
        echo ::set-output name=RPM_VERSION::${ver/-/\~}
        echo ::set-output name=RPM_RAW_VERSION::${raw_ver/-/\~}
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v2
      with:
        go-version: ^${{ env.GO_VERSION }}

    - uses: actions/checkout@v2
      name: Check out code into the Go module directory

    - name: Build
      run: make dist VERSION=${{ steps.get_version.outputs.VERSION }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: true
        prerelease: true

    - name: Set up for rpm and deb packaging
      run: |
        mkdir -p .debpkg/usr/bin
        cp bin/linux/kubectl* .debpkg/usr/bin/
        mkdir -p .rpmpkg/usr/bin
        cp bin/linux/kubectl* .rpmpkg/usr/bin/

    - uses: jiro4989/build-deb-action@v2
      name: Create deb package
      with:
        package: kubectl-buildkit
        package_root: .debpkg
        maintainer: BuildKit CLI for kubectl maintainers
        version: ${{ steps.get_version.outputs.VERSION }}
        arch: 'amd64'
        desc: 'BuildKit CLI for kubectl is a tool for building OCI and Docker images with your kubernetes cluster.'

    - uses: jiro4989/build-rpm-action@v2
      name: Create rpm package
      with:
        summary: 'BuildKit CLI for kubectl is a tool for building OCI and Docker images with your kubernetes cluster.'
        package: kubectl-buildkit
        package_root: .rpmpkg
        maintainer: BuildKit CLI for kubectl maintainers
        version: ${{ steps.get_version.outputs.RPM_VERSION }}
        arch: 'x86_64'
        desc: 'BuildKit CLI for kubectl is a tool for building OCI and Docker images with your kubernetes cluster.'

    - name: List built packages
      run: |
        ls *.deb *.rpm

    - name: Upload deb
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: kubectl-buildkit_${{ steps.get_version.outputs.RAW_VERSION }}_amd64.deb
        asset_name: kubectl-buildkit_${{ steps.get_version.outputs.RAW_VERSION }}_amd64.deb
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload rpm
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: kubectl-buildkit-${{ steps.get_version.outputs.RPM_RAW_VERSION }}-1.el7.x86_64.rpm
        asset_name: kubectl-buildkit-${{ steps.get_version.outputs.RPM_RAW_VERSION }}-1.el7.x86_64.rpm
        asset_content_type: application/x-redhat-package-manager

    - name: Upload linux tgz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/linux.tgz
        asset_name: linux-${{ steps.get_version.outputs.VERSION }}.tgz
        asset_content_type: application/tar+gzip

    - name: Upload macos tgz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/darwin.tgz
        asset_name: darwin-${{ steps.get_version.outputs.VERSION }}.tgz
        asset_content_type: application/tar+gzip

    - name: Stage windows binary
      uses: actions/upload-artifact@v2
      with:
        name: windows.tgz
        path: bin/windows.tgz
        retention-days: 1

  winpkg:
    runs-on: windows-latest
    needs: "build"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Retrieve built windows.tgz
      uses: actions/download-artifact@v2
      with:
        name: windows.tgz
        path: packaging/windows/tools/
    - name: Prep for packaging
      run: |
        mkdir packaging/windows/legal
        cp LICENSE packaging/windows/legal/LICENSE.txt
        mv packaging/windows/tools/windows.tgz packaging/windows/tools/kubectl-buildkit-${{ steps.get_version.outputs.RAW_VERSION }}.tar.gz
    - name: Choco Package
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: pack --version ${{ needs.build.outputs.RAW_VERSION }} packaging/windows/kubectl-buildkit.nuspec

    - name: Upload windows Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build.outputs.upload_url }}
        asset_path: kubectl-buildkit.${{ needs.build.outputs.RAW_VERSION }}.nupkg
        asset_name: kubectl-buildkit.${{ needs.build.outputs.RAW_VERSION }}.nupkg
        asset_content_type: application/zip
